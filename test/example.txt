/*実装にあたり考える必要のあること

:Declrt文で宣言した変数を宣言されてない型で更新(Formu文)できるようにするか
 tがAnyであるか他であるかで型宣言されているかを確認
:if文,for文,match文などのローカル変数に対する処理
:Dstruct文のevalでの処理(tenvを作るようにするか)
 tvalの際に作るようにすると最終的な構造体の形で最初から渡されていることになるため．
:envに追加している所全てでfind_removeをするべきか
:多次元拡張for文の要素が揃ってないリストに対する対応
 Noneによる処理を無視する方法?
:tenvのmakeInsでもenvを作成する必要あり
:tupleの中に入ったListに対応できてない
:入力ができない
:条件式にinを追加したい if month in [1,3,5,7,8,10,12]
:メソッドも欲しい
:Hasilでzipwithがある．
:構造体はJavaScriptでa["x"]という書き方ができる．

*/

/*type Error test----------------------------------------------------------*/

/*
z=[]
fordict k,n in [("key1",1),("key2",2),(3,"key3")]:
   z+=k
   
z+="string"

*/

//not 1+2
//int : a = "A"

/*
z=[]
fordict k,n in [("key1",1),("key2",2)]:
   z+=k

z+="string"
z+=1
*/



/*eval test----------------------------------------------------------------*/

/*
for a,b in [ [1,2] , [3,4] ],[ [5,6],[7,8] ]:
   for c,d in a,b:
      c+d
*/

/*
struct Struct1 :
   int : x
   int : y

struct Struct2 :
   Struct1 : z

z1=Struct2()
z1.z.x=1
a=z1.z.x
*/

/*
struct Struct1 :
   int : x
   int : y

a=Struct1()
a.x=1
//b=a.x
b="a".."x"
*/

/*
//return文により強制終了がされているか
def function1 (x) :
   if x>1 :
     return x
   else:
     return 0

function1 (2)
*/

//相互再帰関数の使用
/*
def f (x) :
   if x<3 :
      1
   else:
      g (x/2)

def g (x) :
   f (x)

g (10)
*/

/*
//定義前の関数を使用
def function1 (x,y) :
   z=x+y
   function0 (z)

def function0 (x) :
   x

z=function1 (2)
z (3)
*/

//再帰関数の使用
/*
def function1 (x,y) :
   z=x+y
   if z<10 :
     function1 (z) (5)
   else :
     z

z=function1 (2) (3)
*/

//再帰関数の使用(Error)
/*
def function1 (x) :
   if x<10 :
     function1 (x) (5)
   else :
     x

z=function1 (2) (3)
*/

//定義後の関数を使用
/*
def function0 (x) :
   x

def function1 (int: x,int: y) :
   z=x+y
   function0 (z)

z=function1(2) (3)
*/

/*
x=[1,2,3]
x=1+x
*/

//引数が複数の関数の使用(Error?)
/*
def function1 (int: x,int: y) :
   z=x+y
   return (x,y,z)

(a,b,c)=function1(2) (3)
*/

/*
def function0 (int: x,int: y) :
   return  x+y
*/

//z=function0(1) (2)

//引数が一つの関数の使用
/*
def function0 (x) :
  return x

function0(1)
*/


/*
i=0
while i<5:
   i+=1
*/

/*
z=[]
d=[("key1",1),("key2",2)]
fordict k,n in d:
   z+=k

z+="string"
*/

/*
z=[]
fordict k,n in [("key1",1),("key2",2)]:
   z+=k
   
z+="string"
*/

/*
z=[]
x=[]
l1=[1,2]
l2=[3,4]
l3=[5]
for a,b,c in l1,l2,l3:
   z+=a+b+c
   x+=a+b
*/

/*
z=[]
l1=[1,2]
l2=[3,4]
l3=[5,6]
for a,b,c in l1,l2,l3:
   z+=a+b
*/

/*
z=[]
for a,b,c in [1,2,3],[4,5,6],[7,8,9]:
   z+=(a+b+c)
*/

/*
l = [1,2,3]
match l :
 |[] -> 0
 |[x] -> 1
 |[x,y,z] -> 2
x
*/

/*
t=(1,2,3)
match t :
  |(a,b,_) -> 0
*/

/*
if not 1<2 :
   1
else :
   0
*/

/*
if 1<2 :
   1
else :
   0
*/

//parseError
//if x=1 :(fun x -> x+2) else : (fun x -> 2*x)

//1+2
//5-2
//4*2
//4/2
//4 mod 2
//"string" + 1
//[1,2,3] .- 2
//not 1<2

//l = [1,2,3]
//l .-= 2

//l = [ (1,2),(3,4) ]
//l .-= (_,2)

//i = 1
//i += 2
//i += 2.4

//2バイト文字に対応していないからエラー
//i += "回"

//[1,2]
//l=[ [1,2] , [3,4,5] ]
//l+= [6,7,8,9]
//lt=[ ("name",1) , ("age",2) , ("id",3) ]
//lt+=("range",4)
//lt=[ [("name",1) , ("age",2)] , [("id",3)] ]
//lt+=[("range",4)]
//c = [1,2,3]
//c += 4
//c += [5,6,7]
//t = (1,2)
//t += 3
//t +="String"
//llt=[ [ [ ("name",1) , ("age",2) ] , [ ("id",3) ] ] , [ [ ("name",4)] ,[ ("age" ,5) ] ] ]
//llt+=[ [ ("id" ,6) ] , [ ("id" ,7) ] ]


//tl=([1,2],[3,4])
//tl+=[5,6]

//i += 2

//string : name = "program"
//(name,since,where) = ("Qsitory",2022,"Japan")


//x=1
//x="string"
//1
